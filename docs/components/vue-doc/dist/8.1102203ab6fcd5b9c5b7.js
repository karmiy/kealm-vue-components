(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{560:function(e,t,n){var l=n(587);"string"==typeof l&&(l=[[e.i,l,""]]),l.locals&&(e.exports=l.locals);(0,n(71).default)("6ca78c2f",l,!1,{})},586:function(e,t,n){"use strict";var l=n(560);n.n(l).a},587:function(e,t,n){(t=e.exports=n(54)(!1)).i(n(588),""),t.push([e.i,"\n",""])},588:function(e,t,n){(e.exports=n(54)(!1)).push([e.i,".salus-tree {\n    overflow: hidden;\n    margin: 0 -24px;\n    padding: 0 24px;\n}\n\n.salus-tree li {\n    padding: 4px 0 0 0;\n}\n\n@keyframes shine {\n    0% {\n        opacity: 1;\n    }\n    50% {\n        opacity: 0.5;\n    }\n    100% {\n        opacity: 1;\n    }\n}\n\n.shine-animate {\n    animation: shine 2s ease infinite;\n}\n\n.custom-node {\n    cursor: pointer;\n    line-height: 26px;\n    margin-left: 4px;\n    display: inline-block;\n    margin: 0 -1000px;\n    padding: 0 1000px;\n}\n\n/*.active {\n    background: #1890FF;\n    color: #fff;\n}*/\n\n.is-dragging {\n    background-color: transparent !important;\n    color: #000;\n    opacity: 0.7;\n}\n\n.file-name, .folder-name, .file-desc, .folder-desc {\n    margin-left: 4px;\n}\n\n.file-desc, .folder-desc {\n    padding: 2px 8px;\n    /*background: #87CEFF;*/\n    background: #f3f6fb;\n    /*color: #FFFFFF;*/\n    color: #1394ff;\n}",""])},598:function(e,t,n){"use strict";n.r(t);var l=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"page-box"},[e._m(0),e._v(" "),n("div",{staticClass:"detail-box"},[n("h2",[e._v("基础树形控件")]),e._v(" "),n("p",{staticClass:"code-left-line"},[e._v("Demo")]),e._v(" "),n("div",{staticClass:"tree-container"},[n("sl-tree",{attrs:{checkable:"",expandedKeys:e.expandedKeys,autoExpandParent:e.autoExpandParent,selectedKeys:e.selectedKeys,treeData:e.treeData,multiple:""},on:{expand:e.onExpand,select:e.onSelect},model:{value:e.checkedKeys,callback:function(t){e.checkedKeys=t},expression:"checkedKeys"}})],1),e._v(" "),n("search-code",{attrs:{code:e.CodeBasic}})],1),e._v(" "),n("div",{staticClass:"detail-box"},[n("h2",[e._v("带连接线的树")]),e._v(" "),n("p",{staticClass:"code-left-line"},[e._v("Demo")]),e._v(" "),n("div",{staticClass:"tree-container"},[n("sl-tree",{attrs:{showLine:"",defaultExpandedKeys:["0-0-0"]}},[n("sl-tree-node",{key:"0-0"},[n("span",{attrs:{slot:"title"},slot:"title"},[e._v("parent 1")]),e._v(" "),n("sl-tree-node",{key:"0-0-0",attrs:{title:"parent 1-0"}},[n("sl-tree-node",{key:"0-0-0-0",attrs:{title:"parent 1-0-1"}},[n("sl-tree-node",{key:"0-0-0-0-0",attrs:{title:"leaf"}})],1),e._v(" "),n("sl-tree-node",{key:"0-0-0-1",attrs:{title:"parent 1-0-2"}},[n("sl-tree-node",{key:"0-0-0-1-0",attrs:{title:"leaf"}})],1),e._v(" "),n("sl-tree-node",{key:"0-0-0-2",attrs:{title:"leaf"}})],1),e._v(" "),n("sl-tree-node",{key:"0-0-1",attrs:{title:"parent 1-1"}},[n("sl-tree-node",{key:"0-0-1-0",attrs:{title:"leaf"}})],1),e._v(" "),n("sl-tree-node",{key:"0-0-2",attrs:{title:"parent 1-2"}},[n("sl-tree-node",{key:"0-0-2-0",attrs:{title:"leaf"}}),e._v(" "),n("sl-tree-node",{key:"0-0-2-1",attrs:{title:"leaf"}})],1)],1),e._v(" "),n("sl-tree-node",{key:"0-1"},[n("span",{attrs:{slot:"title"},slot:"title"},[e._v("parent 2")]),e._v(" "),n("sl-tree-node",{key:"0-1-0",attrs:{title:"parent 2-0"}},[n("sl-tree-node",{key:"0-1-0-0",attrs:{title:"leaf"}}),e._v(" "),n("sl-tree-node",{key:"0-1-0-1",attrs:{title:"leaf"}}),e._v(" "),n("sl-tree-node",{key:"0-1-0-2",attrs:{title:"leaf"}})],1)],1)],1)],1),e._v(" "),n("search-code",{attrs:{code:e.CodeLine}})],1),e._v(" "),n("div",{staticClass:"detail-box"},[n("h2",[e._v("节点可拖动的树")]),e._v(" "),n("p",{staticClass:"code-left-line"},[e._v("Demo")]),e._v(" "),n("div",{staticClass:"tree-container"},[n("sl-tree",{staticClass:"draggable-tree",attrs:{defaultExpandedKeys:e.expandedKeys,draggable:"",treeData:e.dragTreeData},on:{dragenter:e.onDragEnter,drop:e.onDrop}})],1),e._v(" "),n("search-code",{attrs:{code:e.CodeDraggable}})],1),e._v(" "),n("div",{staticClass:"detail-box"},[n("h2",[e._v("文件树")]),e._v(" "),n("p",{staticClass:"code-left-line"},[e._v("Demo")]),e._v(" "),n("div",{staticClass:"tree-container"},[n("sl-directory-tree",{attrs:{multiple:"",defaultExpandAll:""}},[n("sl-tree-node",{key:"0"},[n("span",{staticClass:"folder-name",attrs:{slot:"title"},slot:"title"},[e._v("parent 0")]),e._v(" "),n("span",{staticClass:"folder-desc",attrs:{slot:"title"},slot:"title"},[e._v("salus created at 2018-09-10")]),e._v(" "),n("sl-tree-node",{key:"0-0"},[n("span",{staticClass:"folder-name",attrs:{slot:"title"},slot:"title"},[e._v("parent 0-0")]),e._v(" "),n("span",{staticClass:"folder-desc",attrs:{slot:"title"},slot:"title"},[e._v("salus created at 2018-09-10")]),e._v(" "),n("sl-tree-node",{key:"0-0-0",attrs:{isLeaf:""}},[n("span",{staticClass:"folder-name",attrs:{slot:"title"},slot:"title"},[e._v("leaf 0-0-0")]),e._v(" "),n("span",{staticClass:"folder-desc",attrs:{slot:"title"},slot:"title"},[e._v("salus modified at 2018-09-10")])]),e._v(" "),n("sl-tree-node",{key:"0-0-1",attrs:{isLeaf:""}},[n("span",{staticClass:"folder-name",attrs:{slot:"title"},slot:"title"},[e._v("leaf 0-0-1")]),e._v(" "),n("span",{staticClass:"folder-desc",attrs:{slot:"title"},slot:"title"},[e._v("salus modified at 2018-09-10")])])],1),e._v(" "),n("sl-tree-node",{key:"0-1"},[n("span",{staticClass:"folder-name",attrs:{slot:"title"},slot:"title"},[e._v("parent 0-1")]),e._v(" "),n("span",{staticClass:"folder-desc",attrs:{slot:"title"},slot:"title"},[e._v("salus created at 2018-09-10")]),e._v(" "),n("sl-tree-node",{key:"0-1-0",attrs:{isLeaf:""}},[n("span",{staticClass:"folder-name",attrs:{slot:"title"},slot:"title"},[e._v("leaf 0-1-0")]),e._v(" "),n("span",{staticClass:"folder-desc",attrs:{slot:"title"},slot:"title"},[e._v("salus modified at 2018-09-10")])]),e._v(" "),n("sl-tree-node",{key:"0-1-1",attrs:{isLeaf:""}},[n("span",{staticClass:"folder-name",attrs:{slot:"title"},slot:"title"},[e._v("leaf 0-1-1")]),e._v(" "),n("span",{staticClass:"folder-desc",attrs:{slot:"title"},slot:"title"},[e._v("salus modified at 2018-09-10")])])],1)],1),e._v(" "),n("sl-tree-node",{key:"1"},[n("span",{staticClass:"folder-name",attrs:{slot:"title"},slot:"title"},[e._v("parent 1")]),e._v(" "),n("span",{staticClass:"folder-desc",attrs:{slot:"title"},slot:"title"},[e._v("salus created at 2018-09-10")]),e._v(" "),n("sl-tree-node",{key:"1-0",attrs:{isLeaf:""}},[n("span",{staticClass:"folder-name",attrs:{slot:"title"},slot:"title"},[e._v("leaf 1-0")]),e._v(" "),n("span",{staticClass:"folder-desc",attrs:{slot:"title"},slot:"title"},[e._v("salus modified at 2018-09-10")])]),e._v(" "),n("sl-tree-node",{key:"1-1",attrs:{isLeaf:""}},[n("span",{staticClass:"folder-name",attrs:{slot:"title"},slot:"title"},[e._v("leaf 1-1")]),e._v(" "),n("span",{staticClass:"folder-desc",attrs:{slot:"title"},slot:"title"},[e._v("salus modified at 2018-09-10")])])],1)],1)],1),e._v(" "),n("search-code",{attrs:{code:e.CodeDirectory}})],1),e._v(" "),n("div",{staticClass:"detail-box"},[n("h2",[e._v("可搜索的树")]),e._v(" "),n("p",{staticClass:"code-left-line"},[e._v("Demo")]),e._v(" "),n("div",{staticClass:"tree-container"},[n("sl-input-search",{staticStyle:{"margin-bottom":"8px"},attrs:{placeholder:"Search"},on:{change:e.onChange}}),e._v(" "),n("sl-tree",{attrs:{expandedKeys:e.expandedKeys,autoExpandParent:e.autoExpandParent,treeData:e.searchTreeData},on:{expand:e.onExpand},scopedSlots:e._u([{key:"title",fn:function(t){var l=t.title;return[l.indexOf(e.searchValue)>-1?n("span",[e._v("\n                      "+e._s(l.substr(0,l.indexOf(e.searchValue)))+"\n                      "),n("span",{staticStyle:{color:"#f50"}},[e._v(e._s(e.searchValue))]),e._v("\n                      "+e._s(l.substr(l.indexOf(e.searchValue)+e.searchValue.length))+"\n                    ")]):n("span",[e._v(e._s(l))])]}}])})],1),e._v(" "),n("search-code",{attrs:{code:e.CodeFilter}})],1),e._v(" "),e._m(1)])};l._withStripped=!0;var s=[{title:"0-0",key:"0-0",children:[{title:"0-0-0",key:"0-0-0",children:[{title:"0-0-0-0",key:"0-0-0-0"},{title:"0-0-0-1",key:"0-0-0-1"},{title:"0-0-0-2",key:"0-0-0-2"}]},{title:"0-0-1",key:"0-0-1",children:[{title:"0-0-1-0",key:"0-0-1-0"},{title:"0-0-1-1",key:"0-0-1-1"},{title:"0-0-1-2",key:"0-0-1-2"}]},{title:"0-0-2",key:"0-0-2"}]},{title:"0-1",key:"0-1",children:[{title:"0-1-0-0",key:"0-1-0-0"},{title:"0-1-0-1",key:"0-1-0-1"},{title:"0-1-0-2",key:"0-1-0-2"}]},{title:"0-2",key:"0-2"}],a=[{title:"0-0",key:"0-0",children:[{title:"0-0-0",key:"0-0-0",children:[{title:"0-0-0-0",key:"0-0-0-0"},{title:"0-0-0-1",key:"0-0-0-1"},{title:"0-0-0-2",key:"0-0-0-2"}]},{title:"0-0-1",key:"0-0-1",children:[{title:"0-0-1-0",key:"0-0-1-0"},{title:"0-0-1-1",key:"0-0-1-1"},{title:"0-0-1-2",key:"0-0-1-2"}]},{title:"0-0-2",key:"0-0-2"}]},{title:"0-1",key:"0-1",children:[{title:"0-1-0",key:"0-1-0",children:[{title:"0-1-0-0",key:"0-1-0-0"},{title:"0-1-0-1",key:"0-1-0-1"},{title:"0-1-0-2",key:"0-1-0-2"}]},{title:"0-1-1",key:"0-1-1",children:[{title:"0-1-1-0",key:"0-1-1-0"},{title:"0-1-1-1",key:"0-1-1-1"},{title:"0-1-1-2",key:"0-1-1-2"}]},{title:"0-1-2",key:"0-1-2"}]},{title:"0-2",key:"0-2"}],d=[{title:"0-0",key:"0-0",scopedSlots:{title:"title"},children:[{title:"0-0-0",key:"0-0-0",scopedSlots:{title:"title"},children:[{title:"0-0-0-0",key:"0-0-0-0",scopedSlots:{title:"title"}},{title:"0-0-0-1",key:"0-0-0-1",scopedSlots:{title:"title"}},{title:"0-0-0-2",key:"0-0-0-2",scopedSlots:{title:"title"}},{title:"0-0-0-3",key:"0-0-0-3",scopedSlots:{title:"title"}}]},{title:"0-0-1",key:"0-0-1",scopedSlots:{title:"title"},children:[{title:"0-0-1-0",key:"0-0-1-0",scopedSlots:{title:"title"}},{title:"0-0-1-1",key:"0-0-1-1",scopedSlots:{title:"title"}},{title:"0-0-1-2",key:"0-0-1-2",scopedSlots:{title:"title"}}]},{title:"0-0-2",key:"0-0-2",scopedSlots:{title:"title"}}]},{title:"0-1",key:"0-1",scopedSlots:{title:"title"},children:[{title:"0-1-0",key:"0-1-0",scopedSlots:{title:"title"},children:[{title:"0-1-0-0",key:"0-1-0-0",scopedSlots:{title:"title"}},{title:"0-1-0-1",key:"0-1-0-1",scopedSlots:{title:"title"}},{title:"0-1-0-2",key:"0-1-0-2",scopedSlots:{title:"title"}}]},{title:"0-1-1",key:"0-1-1",scopedSlots:{title:"title"},children:[{title:"0-1-1-0",key:"0-1-1-0",scopedSlots:{title:"title"}},{title:"0-1-1-1",key:"0-1-1-1",scopedSlots:{title:"title"}},{title:"0-1-1-2",key:"0-1-1-2",scopedSlots:{title:"title"}}]},{title:"0-1-2",key:"0-1-2",scopedSlots:{title:"title"}}]},{title:"0-2",key:"0-2",scopedSlots:{title:"title"}}];function i(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var o=[];!function e(t){for(var n=0;n<t.length;n++){var l=t[n],s=l.key,a=l.title;o.push({key:s,title:a}),l.children&&e(l.children,l.key)}}(d);var r={data:function(){return{CodeBasic:"    <template>\n        <div>\n            <sl-tree\n                    checkable\n                    @expand=\"onExpand\"\n                    :expandedKeys=\"expandedKeys\"\n                    :autoExpandParent=\"autoExpandParent\"\n                    v-model=\"checkedKeys\"\n                    @select=\"onSelect\"\n                    :selectedKeys=\"selectedKeys\"\n                    :treeData=\"treeData\"\n                    multiple\n                />\n        </div>\n    </template>\n    <script>\n        const treeData = [\n            {\n                title: '0-0',\n                key: '0-0',\n                children: [\n                    {\n                        title: '0-0-0',\n                        key: '0-0-0',\n                        children: [\n                          { title: '0-0-0-0', key: '0-0-0-0' },\n                          { title: '0-0-0-1', key: '0-0-0-1' },\n                          { title: '0-0-0-2', key: '0-0-0-2' },\n                        ],\n                      },\n                    {\n                        title: '0-0-1',\n                        key: '0-0-1',\n                        children: [\n                          { title: '0-0-1-0', key: '0-0-1-0' },\n                          { title: '0-0-1-1', key: '0-0-1-1' },\n                          { title: '0-0-1-2', key: '0-0-1-2' },\n                        ],\n                      },\n                      {\n                        title: '0-0-2',\n                        key: '0-0-2',\n                      }\n                ],\n            },\n            {\n              title: '0-1',\n              key: '0-1',\n              children: [\n                { title: '0-1-0-0', key: '0-1-0-0' },\n                { title: '0-1-0-1', key: '0-1-0-1' },\n                { title: '0-1-0-2', key: '0-1-0-2' },\n              ],\n            },\n            {\n              title: '0-2',\n              key: '0-2',\n            }\n        ]\n        export default {\n            data() {\n              return {\n                expandedKeys: ['0-0-0', '0-0-1'],\n                autoExpandParent: true,\n                checkedKeys: ['0-0-0'],\n                selectedKeys: ['0-0-1-2'],\n              }\n            },\n            watch: {\n                checkedKeys(val) {\n                    console.log('onCheck', val)\n                }\n            },\n            methods: {\n                onExpand (expandedKeys) {\n                    console.log('onExpand', expandedKeys)\n                    this.expandedKeys = expandedKeys\n                    this.autoExpandParent = false\n                },\n                onCheck (checkedKeys) {\n                    console.log('onCheck', checkedKeys)\n                    this.checkedKeys = checkedKeys\n                },\n                onSelect (selectedKeys, info) {\n                    console.log('onSelect', info)\n                    this.selectedKeys = selectedKeys\n                },\n            }\n        }\n    <\/script>",CodeLine:'\n    <template>\n        <div>\n            <sl-tree\n                    showLine\n                    :defaultExpandedKeys="[\'0-0-0\']"\n                >\n                <sl-tree-node key="0-0">\n                    <span slot="title">parent 1</span>\n                    <sl-tree-node title="parent 1-0" key="0-0-0">\n                        <sl-tree-node title="parent 1-0-1" key="0-0-0-0">\n                            <sl-tree-node title="leaf" key="0-0-0-0-0" />\n                        </sl-tree-node>\n                        <sl-tree-node title="parent 1-0-2" key="0-0-0-1">\n                            <sl-tree-node title="leaf" key="0-0-0-1-0" />\n                        </sl-tree-node>\n                        <sl-tree-node title="leaf" key="0-0-0-2" />\n                    </sl-tree-node>\n                    <sl-tree-node title="parent 1-1" key="0-0-1">\n                        <sl-tree-node title="leaf" key="0-0-1-0" />\n                    </sl-tree-node>\n                    <sl-tree-node title="parent 1-2" key="0-0-2">\n                        <sl-tree-node title="leaf" key="0-0-2-0" />\n                        <sl-tree-node title="leaf" key="0-0-2-1" />\n                    </sl-tree-node>\n                </sl-tree-node>\n                <sl-tree-node key="0-1">\n                    <span slot="title">parent 2</span>\n                    <sl-tree-node title="parent 2-0" key="0-1-0">\n                        <sl-tree-node title="leaf" key="0-1-0-0" />\n                        <sl-tree-node title="leaf" key="0-1-0-1" />\n                        <sl-tree-node title="leaf" key="0-1-0-2" />\n                    </sl-tree-node>\n                </sl-tree-node>\n            </sl-tree>\n        </div>\n    </template>',CodeDraggable:"    <template>\n        <div>\n            <sl-tree\n                class=\"draggable-tree\"\n                :defaultExpandedKeys=\"expandedKeys\"\n                draggable\n                @dragenter=\"onDragEnter\"\n                @drop=\"onDrop\"\n                :treeData=\"dragTreeData\"\n            />\n        </div>\n    </template>\n    <script>\n        const dragTreeData = [\n            {\n                title: '0-0',\n                key: '0-0',\n                children: [\n                    {\n                        title: '0-0-0',\n                        key: '0-0-0',\n                        children: [\n                            { title: '0-0-0-0', key: '0-0-0-0' },\n                            { title: '0-0-0-1', key: '0-0-0-1' },\n                            { title: '0-0-0-2', key: '0-0-0-2' },\n                        ],\n                    },\n                    {\n                        title: '0-0-1',\n                        key: '0-0-1',\n                        children: [\n                            { title: '0-0-1-0', key: '0-0-1-0' },\n                            { title: '0-0-1-1', key: '0-0-1-1' },\n                            { title: '0-0-1-2', key: '0-0-1-2' },\n                        ],\n                    },\n                    {\n                        title: '0-0-2',\n                        key: '0-0-2',\n                    }\n                ],\n            },\n            {\n                title: '0-1',\n                key: '0-1',\n                children: [\n                    {\n                        title: '0-1-0',\n                        key: '0-1-0',\n                        children: [\n                            { title: '0-1-0-0', key: '0-1-0-0' },\n                            { title: '0-1-0-1', key: '0-1-0-1' },\n                            { title: '0-1-0-2', key: '0-1-0-2' },\n                        ],\n                    },\n                    {\n                        title: '0-1-1',\n                        key: '0-1-1',\n                        children: [\n                            { title: '0-1-1-0', key: '0-1-1-0' },\n                            { title: '0-1-1-1', key: '0-1-1-1' },\n                            { title: '0-1-1-2', key: '0-1-1-2' },\n                        ],\n                    },\n                    {\n                        title: '0-1-2',\n                        key: '0-1-2',\n                    },\n                ],\n            },\n            {\n                title: '0-2',\n                key: '0-2',\n            }\n        ]\n        export default {\n            data() {\n              return {\n                dragTreeData,\n                expandedKeys: ['0-0-0', '0-0-1'],\n              }\n            },\n            methods: {\n                onDragEnter (info) {\n                    console.log(info)\n                    this.expandedKeys = info.expandedKeys\n                },\n                onDrop (info) {\n                    console.log(info)\n                    const dropKey = info.node.eventKey\n                    const dragKey = info.dragNode.eventKey\n                    const dropPos = info.node.pos.split('-')\n                    const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1])\n                    const loop = (data, key, callback) => {\n                        data.forEach((item, index, arr) => {\n                            if (item.key === key) {\n                                return callback(item, index, arr)\n                            }\n                            if (item.children) {\n                                return loop(item.children, key, callback)\n                            }\n                        })\n                    }\n                    const data = [...this.dragTreeData];\n                    let dragObj\n                    loop(data, dragKey, (item, index, arr) => {\n                        arr.splice(index, 1)\n                        dragObj = item\n                    })\n                    if (!info.dropToGap) {\n                        loop(data, dropKey, (item) => {\n                            item.children = item.children || [];\n                            item.children.push(dragObj);\n                        });\n                    } else if (\n                        (info.node.$children || []).length > 0\n                        && info.node.expanded\n                        && dropPosition === 1\n                    ) {\n                        loop(data, dropKey, (item) => {\n                            item.children = item.children || [];\n                            item.children.unshift(dragObj);\n                        });\n                    } else {\n                        let ar;\n                        let i;\n                        loop(data, dropKey, (item, index, arr) => {\n                            ar = arr;\n                            i = index;\n                        });\n                        if (dropPosition === -1) {\n                            ar.splice(i, 0, dragObj);\n                        } else {\n                            ar.splice(i + 1, 0, dragObj);\n                        }\n                    }\n                    this.dragTreeData = data\n                },\n            }\n        }\n    <\/script>",CodeDirectory:'    <template>\n        <div>\n            <sl-directory-tree\n                multiple\n                defaultExpandAll\n            >\n                <sl-tree-node key="0">\n                    <span slot="title" class="folder-name">parent 0</span>\n                    <span slot="title" class="folder-desc">salus created at 2018-09-10</span>\n                    <sl-tree-node key="0-0">\n                        <span slot="title" class="folder-name">parent 0-0</span>\n                        <span slot="title" class="folder-desc">salus created at 2018-09-10</span>\n                        <sl-tree-node key="0-0-0" isLeaf>\n                            <span slot="title" class="folder-name">leaf 0-0-0</span>\n                            <span slot="title" class="folder-desc">salus modified at 2018-09-10</span>\n                        </sl-tree-node>\n                        <sl-tree-node key="0-0-1" isLeaf>\n                            <span slot="title" class="folder-name">leaf 0-0-1</span>\n                            <span slot="title" class="folder-desc">salus modified at 2018-09-10</span>\n                        </sl-tree-node>\n                    </sl-tree-node>\n                    <sl-tree-node key="0-1">\n                        <span slot="title" class="folder-name">parent 0-1</span>\n                        <span slot="title" class="folder-desc">salus created at 2018-09-10</span>\n                        <sl-tree-node key="0-1-0" isLeaf>\n                            <span slot="title" class="folder-name">leaf 0-1-0</span>\n                            <span slot="title" class="folder-desc">salus modified at 2018-09-10</span>\n                        </sl-tree-node>\n                        <sl-tree-node key="0-1-1" isLeaf>\n                            <span slot="title" class="folder-name">leaf 0-1-1</span>\n                            <span slot="title" class="folder-desc">salus modified at 2018-09-10</span>\n                        </sl-tree-node>\n                    </sl-tree-node>\n                </sl-tree-node>\n                <sl-tree-node key="1">\n                    <span slot="title" class="folder-name">parent 1</span>\n                    <span slot="title" class="folder-desc">salus created at 2018-09-10</span>\n                    <sl-tree-node key="1-0" isLeaf>\n                        <span slot="title" class="folder-name">leaf 1-0</span>\n                        <span slot="title" class="folder-desc">salus modified at 2018-09-10</span>\n                    </sl-tree-node>\n                    <sl-tree-node key="1-1" isLeaf>\n                        <span slot="title" class="folder-name">leaf 1-1</span>\n                        <span slot="title" class="folder-desc">salus modified at 2018-09-10</span>\n                    </sl-tree-node>\n                </sl-tree-node>\n            </sl-directory-tree>\n        </div>\n    </template>',CodeFilter:"    <template>\n        <div>\n            <sl-input-search style=\"margin-bottom: 8px\" placeholder=\"Search\" @change=\"onChange\" />\n            <sl-tree\n                @expand=\"onExpand\"\n                :expandedKeys=\"expandedKeys\"\n                :autoExpandParent=\"autoExpandParent\"\n                :treeData=\"searchTreeData\"\n            >\n                <template slot=\"title\" slot-scope=\"{title}\">\n                    <span v-if=\"title.indexOf(searchValue) > -1\">\n                      {{title.substr(0, title.indexOf(searchValue))}}\n                      <span style=\"color: #f50\">{{searchValue}}</span>\n                      {{title.substr(title.indexOf(searchValue) + searchValue.length)}}\n                    </span>\n                    <span v-else>{{title}}</span>\n                </template>\n            </sl-tree>\n        </div>\n    </template>\n    <script>\n        const searchTreeData = [\n            {\n                title: '0-0',\n                key: '0-0',\n                scopedSlots: {title: \"title\"},\n                children: [\n                    {\n                        title: '0-0-0',\n                        key: '0-0-0',\n                        scopedSlots: {title: \"title\"},\n                        children: [\n                            { title: '0-0-0-0', key: '0-0-0-0', scopedSlots: {title: \"title\"} },\n                            { title: '0-0-0-1', key: '0-0-0-1', scopedSlots: {title: \"title\"} },\n                            { title: '0-0-0-2', key: '0-0-0-2', scopedSlots: {title: \"title\"} },\n                            { title: '0-0-0-3', key: '0-0-0-3', scopedSlots: {title: \"title\"} },\n                        ],\n                    },\n                    {\n                        title: '0-0-1',\n                        key: '0-0-1',\n                        scopedSlots: {title: \"title\"},\n                        children: [\n                            { title: '0-0-1-0', key: '0-0-1-0', scopedSlots: {title: \"title\"} },\n                            { title: '0-0-1-1', key: '0-0-1-1', scopedSlots: {title: \"title\"} },\n                            { title: '0-0-1-2', key: '0-0-1-2', scopedSlots: {title: \"title\"} },\n                        ],\n                    },\n                    {\n                        title: '0-0-2',\n                        key: '0-0-2',\n                        scopedSlots: {title: \"title\"},\n                    }\n                ],\n            },\n            {\n                title: '0-1',\n                key: '0-1',\n                scopedSlots: {title: \"title\"},\n                children: [\n                    {\n                        title: '0-1-0',\n                        key: '0-1-0',\n                        scopedSlots: {title: \"title\"},\n                        children: [\n                            { title: '0-1-0-0', key: '0-1-0-0', scopedSlots: {title: \"title\"} },\n                            { title: '0-1-0-1', key: '0-1-0-1', scopedSlots: {title: \"title\"} },\n                            { title: '0-1-0-2', key: '0-1-0-2', scopedSlots: {title: \"title\"} },\n                        ],\n                    },\n                    {\n                        title: '0-1-1',\n                        key: '0-1-1',\n                        scopedSlots: {title: \"title\"},\n                        children: [\n                            { title: '0-1-1-0', key: '0-1-1-0', scopedSlots: {title: \"title\"} },\n                            { title: '0-1-1-1', key: '0-1-1-1', scopedSlots: {title: \"title\"} },\n                            { title: '0-1-1-2', key: '0-1-1-2', scopedSlots: {title: \"title\"} },\n                        ],\n                    },\n                    {\n                        title: '0-1-2',\n                        key: '0-1-2',\n                        scopedSlots: {title: \"title\"},\n                    },\n                ],\n            },\n            {\n                title: '0-2',\n                key: '0-2',\n                scopedSlots: {title: \"title\"},\n            }\n        ]\n        \n        const getParentKey = (key, tree) => {\n            let parentKey\n            for (let i = 0; i < tree.length; i++) {\n                const node = tree[i]\n                if (node.children) {\n                    if (node.children.some(item => item.key === key)) {\n                        parentKey = node.key\n                    } else if (getParentKey(key, node.children)) {\n                        parentKey = getParentKey(key, node.children)\n                    }\n                }\n            }\n            return parentKey\n        }\n        const dataList = [];\n        const generateList = (data) => {\n            for (let i = 0; i < data.length; i++) {\n                const node = data[i]\n                const key = node.key,\n                    title = node.title;\n                dataList.push({ key, title })\n                if (node.children) {\n                    generateList(node.children, node.key)\n                }\n            }\n        }\n        generateList(searchTreeData)\n        \n        const filterNodes = (nodes, value) => {\n            if (!Array.isArray(nodes)) {\n                return;\n            }\n            nodes.forEach(node => {\n                let flag = node.title.includes(value);\n    \n                const children = node.children || [];\n                if (children.length > 0) {\n                    filterNodes(children, value);\n                }\n    \n                node.isHide = !flag && !children.some(child => !child.isHide);\n            })\n        }\n        export default {\n            data() {\n              return {\n                searchTreeData,\n                autoExpandParent: true,\n                expandedKeys: ['0-0-0', '0-0-1'],\n                searchValue: '',\n              }\n            },\n            methods: {\n                onChange (e) {\n                    const value = e.target.value\n                    const expandedKeys = dataList.map((item) => {\n                        if (item.title.indexOf(value) > -1) {\n                            return getParentKey(item.key, this.searchTreeData)\n                        }\n                        return null\n                    }).filter((item, i, self) => item && self.indexOf(item) === i)\n                    \n                    filterNodes(this.searchTreeData, value);\n                    Object.assign(this, {\n                        expandedKeys,\n                        searchValue: value,\n                        autoExpandParent: true,\n                    })\n                },\n            }\n        }\n    <\/script>",treeData:s,dragTreeData:a,searchTreeData:d,expandedKeys:["0-0-0","0-0-1"],autoExpandParent:!0,checkedKeys:["0-0-0"],selectedKeys:["0-0-1-2"],searchValue:""}},components:{SearchCode:function(){return new Promise(function(e){n.e(0).then(function(t){e(n(637))}.bind(null,n)).catch(n.oe)})}},watch:{checkedKeys:function(e){console.log("onCheck",e)}},methods:{onExpand:function(e){console.log("onExpand",e),this.expandedKeys=e,this.autoExpandParent=!1},onCheck:function(e){console.log("onCheck",e),this.checkedKeys=e},onSelect:function(e,t){console.log("onSelect",t),this.selectedKeys=e},onDragEnter:function(e){console.log(e)},onDrop:function(e){console.log(e);var t,n=e.node.eventKey,l=e.dragNode.eventKey,s=e.node.pos.split("-"),a=e.dropPosition-Number(s[s.length-1]),d=function e(t,n,l){t.forEach(function(t,s,a){return t.key===n?l(t,s,a):t.children?e(t.children,n,l):void 0})},o=i(this.dragTreeData);if(d(o,l,function(e,n,l){l.splice(n,1),t=e}),e.dropToGap)if((e.node.$children||[]).length>0&&e.node.expanded&&1===a)d(o,n,function(e){e.children=e.children||[],e.children.unshift(t)});else{var r,c;d(o,n,function(e,t,n){r=n,c=t}),-1===a?r.splice(c,0,t):r.splice(c+1,0,t)}else d(o,n,function(e){e.children=e.children||[],e.children.push(t)});this.dragTreeData=o},onChange:function(e){var t=this,n=e.target.value,l=o.map(function(e){return e.title.indexOf(n)>-1?function e(t,n){for(var l,s=0;s<n.length;s++){var a=n[s];a.children&&(a.children.some(function(e){return e.key===t})?l=a.key:e(t,a.children)&&(l=e(t,a.children)))}return l}(e.key,t.searchTreeData):null}).filter(function(e,t,n){return e&&n.indexOf(e)===t});!function e(t,n){Array.isArray(t)&&t.forEach(function(t){var l=t.title.includes(n),s=t.children||[];s.length>0&&e(s,n),t.isHide=!l&&!s.some(function(e){return!e.isHide})})}(this.searchTreeData,n),Object.assign(this,{expandedKeys:l,searchValue:n,autoExpandParent:!0})}}},c=(n(586),n(53)),v=Object(c.a)(r,l,[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"detail-box"},[t("h1",[this._v("Tree 树控件")]),this._v(" "),t("p",[this._v("文件夹、组织架构、生物分类、国家地区等等，世间万物的大多数结构都是树形结构。使用树控件可以完整展现其中的层级关系，并具有展开收起选择等交互功能。")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"detail-box"},[n("h2",[e._v("API")]),e._v(" "),n("p",{staticClass:"row-in-round"},[e._v("sl-tree")]),e._v(" "),n("table",{staticClass:"salus-table salus-table-striped salus-table-hover"},[n("thead",[n("tr",[n("th",{attrs:{width:"15%"}},[e._v("参数")]),e._v(" "),n("th",{attrs:{width:"35%"}},[e._v("描述")]),e._v(" "),n("th",{attrs:{width:"35%"}},[e._v("类型")]),e._v(" "),n("th",{attrs:{width:"15%"}},[e._v("默认值")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("treeData")]),e._v(" "),n("td",[e._v("节点的配置描述")]),e._v(" "),n("td",[e._v("array")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("autoExpandParent")]),e._v(" "),n("td",[e._v("是否自动展开父节点")]),e._v(" "),n("td",[e._v("boolean")]),e._v(" "),n("td",[e._v("true")])]),e._v(" "),n("tr",[n("td",[e._v("checkedKeys(v-model)")]),e._v(" "),n("td",[e._v("（受控）选中复选框的树节点（注意：父子节点有关联，如果传入父节点key，则子节点自动选中；相应当子节点key都传入，父节点也自动选中。当设置checkable和checkStrictly，它是一个有checked和halfChecked属性的对象，并且父子节点的选中与否不再关联")]),e._v(" "),n("td",[e._v("string[] | number[] | {checked: string[] | number[], halfChecked: string[] | number[]}")]),e._v(" "),n("td",[e._v("[]")])]),e._v(" "),n("tr",[n("td",[e._v("checkStrictly")]),e._v(" "),n("td",[e._v("checkable状态下节点选择完全受控（父子节点选中状态不再关联）")]),e._v(" "),n("td",[e._v("boolean")]),e._v(" "),n("td",[e._v("false")])]),e._v(" "),n("tr",[n("td",[e._v("defaultCheckedKeys")]),e._v(" "),n("td",[e._v("默认选中复选框的树节点")]),e._v(" "),n("td",[e._v("string[] | number[]\t")]),e._v(" "),n("td",[e._v("[]")])]),e._v(" "),n("tr",[n("td",[e._v("defaultExpandAll")]),e._v(" "),n("td",[e._v("默认展开所有树节点")]),e._v(" "),n("td",[e._v("boolean")]),e._v(" "),n("td",[e._v("false")])]),e._v(" "),n("tr",[n("td",[e._v("defaultExpandedKeys")]),e._v(" "),n("td",[e._v("默认展开指定的树节点")]),e._v(" "),n("td",[e._v("string[] | number[]\t")]),e._v(" "),n("td",[e._v("[]")])]),e._v(" "),n("tr",[n("td",[e._v("defaultExpandParent")]),e._v(" "),n("td",[e._v("默认展开父节点")]),e._v(" "),n("td",[e._v("boolean")]),e._v(" "),n("td",[e._v("true")])]),e._v(" "),n("tr",[n("td",[e._v("defaultSelectedKeys")]),e._v(" "),n("td",[e._v("默认选中的树节点")]),e._v(" "),n("td",[e._v("string[] | number[]")]),e._v(" "),n("td",[e._v("[]")])]),e._v(" "),n("tr",[n("td",[e._v("disabled")]),e._v(" "),n("td",[e._v("将树禁用")]),e._v(" "),n("td",[e._v("boolean")]),e._v(" "),n("td",[e._v("false")])]),e._v(" "),n("tr",[n("td",[e._v("draggable")]),e._v(" "),n("td",[e._v("设置节点可拖拽")]),e._v(" "),n("td",[e._v("boolean")]),e._v(" "),n("td",[e._v("false")])]),e._v(" "),n("tr",[n("td",[e._v("expandedKeys(.sync)")]),e._v(" "),n("td",[e._v("（受控）展开指定的树节点")]),e._v(" "),n("td",[e._v("string[] | number[]")]),e._v(" "),n("td",[e._v("[]")])]),e._v(" "),n("tr",[n("td",[e._v("filterTreeNode")]),e._v(" "),n("td",[e._v("按需筛选树节点（高亮），返回true")]),e._v(" "),n("td",[e._v("function(node)\t")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("loadData")]),e._v(" "),n("td",[e._v("异步加载数据")]),e._v(" "),n("td",[e._v("function(node)\t")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("loadedKeys")]),e._v(" "),n("td",[e._v("（受控）已经加载的节点，需要配合 loadData 使用")]),e._v(" "),n("td",[e._v("string[] | number[]")]),e._v(" "),n("td",[e._v("[]")])]),e._v(" "),n("tr",[n("td",[e._v("multiple")]),e._v(" "),n("td",[e._v("支持点选多个节点（节点本身）")]),e._v(" "),n("td",[e._v("boolean")]),e._v(" "),n("td",[e._v("false")])]),e._v(" "),n("tr",[n("td",[e._v("selectedKeys(.sync)\t")]),e._v(" "),n("td",[e._v("（受控）设置选中的树节点")]),e._v(" "),n("td",[e._v("string[] | number[]\t")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("showIcon")]),e._v(" "),n("td",[e._v("是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式")]),e._v(" "),n("td",[e._v("boolean")]),e._v(" "),n("td",[e._v("false")])]),e._v(" "),n("tr",[n("td",[e._v("showLine")]),e._v(" "),n("td",[e._v("是否展示连接线")]),e._v(" "),n("td",[e._v("boolean")]),e._v(" "),n("td",[e._v("false")])])])]),e._v(" "),n("p",{staticClass:"row-in-round"},[e._v("sl-tree 事件")]),e._v(" "),n("table",{staticClass:"salus-table salus-table-striped salus-table-hover"},[n("thead",[n("tr",[n("th",{attrs:{width:"15%"}},[e._v("事件名称")]),e._v(" "),n("th",{attrs:{width:"70%"}},[e._v("说明")]),e._v(" "),n("th",{attrs:{width:"15%"}},[e._v("回调参数")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("check")]),e._v(" "),n("td",[e._v("点击复选框触发")]),e._v(" "),n("td",[e._v("function(checkedKeys, e:{checked: bool, checkedNodes, node, event})")])]),e._v(" "),n("tr",[n("td",[e._v("dragend")]),e._v(" "),n("td",[e._v("dragend 触发时调用")]),e._v(" "),n("td",[e._v("function({event, node})")])]),e._v(" "),n("tr",[n("td",[e._v("dragenter")]),e._v(" "),n("td",[e._v("dragenter 触发时调用")]),e._v(" "),n("td",[e._v("function({event, node, expandedKeys})")])]),e._v(" "),n("tr",[n("td",[e._v("dragleave")]),e._v(" "),n("td",[e._v("dragleave 触发时调用")]),e._v(" "),n("td",[e._v("function({event, node})")])]),e._v(" "),n("tr",[n("td",[e._v("dragover")]),e._v(" "),n("td",[e._v("dragover 触发时调用")]),e._v(" "),n("td",[e._v("function({event, node})")])]),e._v(" "),n("tr",[n("td",[e._v("dragstart")]),e._v(" "),n("td",[e._v("开始拖拽时调用")]),e._v(" "),n("td",[e._v("function({event, node})")])]),e._v(" "),n("tr",[n("td",[e._v("drop")]),e._v(" "),n("td",[e._v("drop 触发时调用")]),e._v(" "),n("td",[e._v("function({event, node, dragNode, dragNodesKeys})")])]),e._v(" "),n("tr",[n("td",[e._v("expand")]),e._v(" "),n("td",[e._v("展开/收起节点时触发")]),e._v(" "),n("td",[e._v("function(expandedKeys, {expanded: bool, node})")])]),e._v(" "),n("tr",[n("td",[e._v("load")]),e._v(" "),n("td",[e._v("节点加载完毕时触发")]),e._v(" "),n("td",[e._v("function(loadedKeys, {event, node})")])]),e._v(" "),n("tr",[n("td",[e._v("rightClick")]),e._v(" "),n("td",[e._v("响应右键点击")]),e._v(" "),n("td",[e._v("function({event, node})")])]),e._v(" "),n("tr",[n("td",[e._v("select")]),e._v(" "),n("td",[e._v("点击树节点触发")]),e._v(" "),n("td",[e._v("function(selectedKeys, e:{selected: bool, selectedNodes, node, event})")])])])]),e._v(" "),n("p",{staticClass:"row-in-round"},[e._v("sl-tree-node")]),e._v(" "),n("p",[e._v("结点描述数据对象，是 treeNodes 中的一项，TreeNode 使用相同的 API。")]),e._v(" "),n("table",{staticClass:"salus-table salus-table-striped salus-table-hover"},[n("thead",[n("tr",[n("th",{attrs:{width:"15%"}},[e._v("参数")]),e._v(" "),n("th",{attrs:{width:"35%"}},[e._v("描述")]),e._v(" "),n("th",{attrs:{width:"35%"}},[e._v("类型")]),e._v(" "),n("th",{attrs:{width:"15%"}},[e._v("默认值")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("class")]),e._v(" "),n("td",[e._v("节点的 class")]),e._v(" "),n("td",[e._v("string")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("style")]),e._v(" "),n("td",[e._v("节点的 style")]),e._v(" "),n("td",[e._v("string|object")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("disableCheckbox")]),e._v(" "),n("td",[e._v("禁掉 checkbox")]),e._v(" "),n("td",[e._v("boolean")]),e._v(" "),n("td",[e._v("false")])]),e._v(" "),n("tr",[n("td",[e._v("disabled")]),e._v(" "),n("td",[e._v("禁掉响应")]),e._v(" "),n("td",[e._v("boolean")]),e._v(" "),n("td",[e._v("false")])]),e._v(" "),n("tr",[n("td",[e._v("icon")]),e._v(" "),n("td",[e._v("自定义图标。可接收组件，props 为当前节点 props")]),e._v(" "),n("td",[e._v("slot|slot-scope")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("isLeaf")]),e._v(" "),n("td",[e._v("设置为叶子节点(设置了loadData时有效)")]),e._v(" "),n("td",[e._v("boolean")]),e._v(" "),n("td",[e._v("false")])]),e._v(" "),n("tr",[n("td",[e._v("key")]),e._v(" "),n("td",[e._v("被树的 (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys 属性所用。注意：整个树范围内的所有节点的 key 值不能重复！")]),e._v(" "),n("td",[e._v("string | number")]),e._v(" "),n("td",[e._v("内部计算出的节点位置")])]),e._v(" "),n("tr",[n("td",[e._v("selectable")]),e._v(" "),n("td",[e._v("设置节点是否可被选中")]),e._v(" "),n("td",[e._v("boolean")]),e._v(" "),n("td",[e._v("true")])]),e._v(" "),n("tr",[n("td",[e._v("title")]),e._v(" "),n("td",[e._v("标题")]),e._v(" "),n("td",[e._v("string|slot|slot-scope")]),e._v(" "),n("td",[e._v("'---'")])]),e._v(" "),n("tr",[n("td",[e._v("slots")]),e._v(" "),n("td",[e._v("使用treeNodes时，可以通过该属性配置支持slot的属性，如 slots: { title: 'XXX'}")]),e._v(" "),n("td",[e._v("object")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("scopedSlots")]),e._v(" "),n("td",[e._v("使用columns时，可以通过该属性配置支持slot-scope的属性，如 scopedSlots: { title: 'XXX'}")]),e._v(" "),n("td",[e._v("object")]),e._v(" "),n("td",[e._v("-")])]),e._v(" "),n("tr",[n("td",[e._v("on")]),e._v(" "),n("td",[e._v("事件对象，仅在treeNodes使用方式中生效，如{click: () => {}}")]),e._v(" "),n("td",[e._v("object")]),e._v(" "),n("td",[e._v("'---'")])])])]),e._v(" "),n("p",{staticClass:"row-in-round"},[e._v("sl-directory-tree")]),e._v(" "),n("table",{staticClass:"salus-table salus-table-striped salus-table-hover"},[n("thead",[n("tr",[n("th",{attrs:{width:"15%"}},[e._v("参数")]),e._v(" "),n("th",{attrs:{width:"35%"}},[e._v("描述")]),e._v(" "),n("th",{attrs:{width:"35%"}},[e._v("类型")]),e._v(" "),n("th",{attrs:{width:"15%"}},[e._v("默认值")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("expandAction")]),e._v(" "),n("td",[e._v("目录展开逻辑，可选 false 'click' 'doubleclick'")]),e._v(" "),n("td",[e._v("string")]),e._v(" "),n("td",[e._v("'click'")])])])])])}],!1,null,"610b47e2",null);v.options.__file="src/components/tree/tree.vue";t.default=v.exports}}]);